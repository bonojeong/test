{"version":3,"sources":["Detail.js"],"names":["박스","styled","div","제목","h4","props","색상","TapContent","useEffect","스위치변경","누른탭","Info","재고","connect","state","reducer","alert열렸니","reducer2","useState","alert","alert변경","누른탭변경","스위치","useContext","재고context","타이머","setTimeout","clearTimeout","id","useParams","찾은상품","shoes","find","x","history","useHistory","arr","localStorage","getItem","JSON","parse","push","Set","setItem","stringify","className","src","alt","width","title","content","price","onClick","재고변경","dispatch","type","데이터","name","quan","variant","defaultActiveKey","Item","Link","eventKey","in","classNames","timeout"],"mappings":"6OA+BIA,EAAKC,IAAOC,IAAV,iDAGFC,EAAKF,IAAOG,GAAV,oEAES,SAAAC,GAAK,OAAIA,EAAMC,gBA6H9B,SAASC,EAAWF,GAMhB,OAJAG,qBAAW,WACPH,EAAMI,gCAAM,MAGE,IAAdJ,EAAMK,mBACC,+EACa,IAAdL,EAAMK,mBACL,+EACa,IAAdL,EAAMK,mBACL,oFADJ,EAQT,SAASC,EAAKN,GACV,OACI,gDAASA,EAAMO,aAAG,MAUbC,uBANb,SAAsBC,GACpB,MAAO,CACHA,MAAQA,EAAMC,QACdC,0BAAWF,EAAMG,YAGVJ,EAtJf,SAAgBR,GAEZ,MAAuBa,oBAAS,GAAhC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAA+BF,mBAAS,IAAxC,mBAEA,GAFA,UAEkBA,mBAAS,IAA3B,mBAAKR,EAAL,KAAUW,EAAV,KACA,EAAkBH,oBAAS,GAA3B,mBAAKI,EAAL,KAAUb,EAAV,KAESc,qBAAWC,KAOpBhB,qBAAW,WAEP,IAAIiB,EAAMC,YAAW,WACjBN,GAAQ,KACV,KAGF,OAAO,WAAMO,aAAaF,MAC5B,CAACN,IAKH,IAAMS,EAAOC,cAAPD,GACFE,EAAOzB,EAAM0B,MAAMC,MAAM,SAACC,GAAD,OAAOA,EAAEL,IAAMA,KACxCM,EAAUC,cA2Bd,OAjBA3B,qBAAU,WACN,IAAI4B,EAAMC,aAAaC,QAAQ,YAE3BF,EADO,MAAPA,EACM,GACGG,KAAKC,MAAMJ,IAEpBK,KAAKb,GACTQ,EAAM,IAAIM,IAAIN,GACdA,EAAG,YAAOA,GAEVC,aAAaM,QAAQ,UAAWJ,KAAKK,UAAUR,MAEjD,IAME,sBAAKS,UAAU,YAAf,UACI,eAAC,EAAD,WACI,cAAC,EAAD,CAAIA,UAAU,MAAd,oBACA,cAAC,EAAD,CAAI,eAAG,SAAP,wBAOU,IAAV1B,EACG,qBAAK0B,UAAU,WAAf,SACC,+GAEF,KAIN,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKC,IAAG,iDAAoDC,IAAI,KAAKC,MAAM,WAE/E,sBAAKH,UAAU,gBAAf,UACI,oBAAIA,UAAU,OAAd,SAAsBf,EAAKmB,QAC3B,4BAAInB,EAAKoB,UACT,8BAAIpB,EAAKqB,MAAT,YACA,cAACxC,EAAD,CAAM,eAAIN,EAAMO,eAGhB,wBAAQiC,UAAU,iBAAiBO,QAAY,WAC3C/C,EAAMgD,yBAAM,CAAC,EAAE,GAAG,KAClBhD,EAAMiD,SAAS,CAAEC,KAAO,2BAAQC,qBAAM,CAAE5B,GAAIE,EAAKF,GAAI6B,KAAM3B,EAAKmB,MAAOS,KAAM,KAC7ExB,EAAQO,KAAK,UAHjB,sCAMA,wBAAQI,UAAU,iBAAiBO,QAAY,WAC3ClB,EAAQO,KAAK,MADjB,4CAKR,eAAC,IAAD,CAAKI,UAAU,OAAOc,QAAQ,OAAOC,iBAAiB,SAAtD,UACI,cAAC,IAAIC,KAAL,UACI,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASX,QAAS,WAAM3C,GAAM,GAAQY,EAAM,IAA/D,sBAEJ,cAAC,IAAIwC,KAAL,UACI,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASX,QAAS,WAAM3C,GAAM,GAAQY,EAAM,IAA/D,2BAQR,cAAC,IAAD,CAAe2C,GAAI1C,EAAK2C,WAAW,MAAMC,QAAS,IAAlD,SACI,cAAC3D,EAAD,CAAY,qBAAKG,EAAK,iCAAOD","file":"static/js/4.c7f55aca.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, {useContext, useEffect, useState} from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components'\r\nimport './Detail.scss'\r\nimport {재고context} from './App.js';\r\nimport {Nav} from 'react-bootstrap';\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n//LifeCycle Hook !! 옛날~~\r\n// class Detail2 extends React.Component{\r\n//     //컴포넌트가 생겨날 때 !\r\n//     componentDidMount(){\r\n\r\n//     }\r\n//     //컴포넌트가 사라질 때 !!\r\n//     componentWillUnmount(){\r\n\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//css를 미리 입혀놓은 컨포넌트 ! \r\nlet 박스 = styled.div`\r\n    padding : 20px;\r\n`;\r\nlet 제목 = styled.h4`\r\n    font-size : 25px;\r\n    color : ${ props => props.색상 }\r\n`;\r\n\r\n\r\n\r\nfunction Detail(props){\r\n\r\n    let [alert, alert변경] = useState(true);\r\n    let [inputData, inputData변경] = useState('');\r\n\r\n    let [누른탭, 누른탭변경]= useState(0);\r\n    let [스위치, 스위치변경]= useState(false);\r\n\r\n    let 재고 = useContext(재고context);\r\n\r\n\r\n    \r\n    //라이프 사이클 훅 \r\n    //useEffect는 컴포넌트가 마운트(실행)되었을 때, 사라질 때,\r\n    //업데이트되었을 때 작동\r\n    useEffect( ()=>{\r\n\r\n        let 타이머 = setTimeout(()=>{\r\n            alert변경(false)\r\n        },2000)\r\n        // 2초가 되기전에 뒤로가기나 페이지 이동이 있을 수도 있으니까\r\n        //벗어나면 함수를 바로 종료 시켜버려서 버그 예방\r\n        return ()=>{ clearTimeout(타이머)}\r\n    },[alert]);\r\n    //[] 안에 아무것도 없으면 로드되었을 때 한번만 작동 !!\r\n    //[alert] state가 변경되었을 때만 작동한다!!!!! 조건을 만듦, 여러개 작성가능\r\n\r\n\r\n    let { id } = useParams();\r\n    let 찾은상품 = props.shoes.find( (x) => x.id == id );\r\n    let history = useHistory();\r\n\r\n\r\n\r\n    // 1. 누가 Detail페이지 들어가면\r\n    // 2. localstorage에 있는 항목을 꺼냄\r\n    // 3. 경우가 2가지 있겠네 ??????? null or []이 나오거나\r\n    // 4. []이 나오면 거기에 URL파라미터의 id 부분을 push() 한다.\r\n    // 5. findIndex()로 중복처리하기 ~~ or Set자료형 사용 ~\r\n    // 6. 그러면 [] 를 다시 localStorage에 저장함 (따옴표 쳐서)\r\n    useEffect(()=>{\r\n        var arr = localStorage.getItem('watched');\r\n        if( arr == null ) {\r\n            arr = []            \r\n        } else{arr = JSON.parse(arr)}\r\n\r\n        arr.push(id);\r\n        arr = new Set(arr);\r\n        arr = [...arr]; //...은 괄호를 벗겨달라는 뜻 ! \r\n\r\n        localStorage.setItem('watched', JSON.stringify(arr));\r\n\r\n    },[]);\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <박스>\r\n                <제목 className='red'>Detail</제목>\r\n                <제목 색상=\"purple\">Detail</제목>\r\n            </박스>\r\n\r\n            {/* {inputData}\r\n            <input onChange={ (e)=>{ inputData변경(e.target.value) }}/> */}\r\n\r\n            {\r\n                alert === true\r\n                ? (<div className=\"my-alert\">\r\n                    <p>재고가 얼마 남지 않았습니다.</p>\r\n                  </div>)\r\n                : null\r\n            }\r\n\r\n            \r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <img src={`https://codingapple1.github.io/shop/shoes1.jpg`} alt=\"dd\" width=\"100%\" />\r\n                </div>\r\n                <div className=\"col-md-6 mt-4\">\r\n                    <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n                    <p>{찾은상품.content}</p>\r\n                    <p>{찾은상품.price}원</p>\r\n                    <Info 재고={props.재고}></Info>\r\n                    \r\n\r\n                    <button className=\"btn btn-danger\" onClick = { ()=>{ \r\n                        props.재고변경( [9,10,11])\r\n                        props.dispatch({ type : '항목추가', 데이터 : { id: 찾은상품.id, name: 찾은상품.title, quan :1} });\r\n                        history.push('/cart');\r\n                    }}>주문하기</button> \r\n\r\n                    <button className=\"btn btn-danger\" onClick = { () => {\r\n                        history.push('/');\r\n                    } }>뒤로가기</button> \r\n                </div>\r\n            </div>\r\n            <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-0\" onClick={()=>{ 스위치변경(false); 누른탭변경(0); }}>Active</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-1\" onClick={()=>{ 스위치변경(false); 누른탭변경(1); }}>Option 2</Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n            {/* 애니메이션 라이브러리 \r\n            in에는 조건\r\n            classNames 에는 클래스 네임\r\n            timeout 에는 애니메이션duration \r\n            */}\r\n            <CSSTransition in={스위치} classNames=\"wow\" timeout={500}>\r\n                <TapContent 누른탭={누른탭} 스위치변경={스위치변경}/>\r\n            </CSSTransition>\r\n            \r\n\r\n        </div>\r\n    )\r\n  }\r\n\r\nfunction TapContent(props){\r\n\r\n    useEffect( ()=>{\r\n        props.스위치변경(true);\r\n    });\r\n\r\n    if (props.누른탭 === 0){\r\n        return <div>0번째내용입니다.</div>\r\n    } else if(props.누른탭 === 1){\r\n        return <div>1번째내용입니다.</div>\r\n    } else if(props.누른탭 === 2){\r\n        return <div>2번째내용입니다.</div>\r\n    }\r\n    \r\n\r\n}\r\n\r\n  \r\n  function Info(props){\r\n      return (\r\n          <p>재고 : {props.재고[0]}</p>\r\n      )\r\n  }\r\n\r\n  function state를props화(state){\r\n    return {\r\n        state : state.reducer,\r\n        alert열렸니 : state.reducer2\r\n    }\r\n  }\r\nexport default connect(state를props화)(Detail)\r\n"],"sourceRoot":""}